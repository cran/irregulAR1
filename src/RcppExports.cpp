// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ar1_lpdf_cpp
double ar1_lpdf_cpp(const arma::vec& x, const arma::vec& mu, const arma::uvec& times, const double rho, const double sigma);
RcppExport SEXP _irregulAR1_ar1_lpdf_cpp(SEXP xSEXP, SEXP muSEXP, SEXP timesSEXP, SEXP rhoSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_lpdf_cpp(x, mu, times, rho, sigma));
    return rcpp_result_gen;
END_RCPP
}
// ar1_cov_consecutive
arma::mat ar1_cov_consecutive(const int n, const double rho, const double sigma);
RcppExport SEXP _irregulAR1_ar1_cov_consecutive(SEXP nSEXP, SEXP rhoSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_cov_consecutive(n, rho, sigma));
    return rcpp_result_gen;
END_RCPP
}
// ar1_cov_irregular
arma::mat ar1_cov_irregular(const arma::uvec& times, const double rho, const double sigma);
RcppExport SEXP _irregulAR1_ar1_cov_irregular(SEXP timesSEXP, SEXP rhoSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_cov_irregular(times, rho, sigma));
    return rcpp_result_gen;
END_RCPP
}
// ar1_cross_cov
arma::mat ar1_cross_cov(const arma::uvec& times1, const arma::uvec& times2, const double rho, const double sigma);
RcppExport SEXP _irregulAR1_ar1_cross_cov(SEXP times1SEXP, SEXP times2SEXP, SEXP rhoSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type times1(times1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type times2(times2SEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_cross_cov(times1, times2, rho, sigma));
    return rcpp_result_gen;
END_RCPP
}
// ar1_cov_chol_irregular
arma::mat ar1_cov_chol_irregular(const arma::uvec& times, const double rho, const double sigma);
RcppExport SEXP _irregulAR1_ar1_cov_chol_irregular(SEXP timesSEXP, SEXP rhoSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_cov_chol_irregular(times, rho, sigma));
    return rcpp_result_gen;
END_RCPP
}
// ar1_prec_consecutive
arma::sp_mat ar1_prec_consecutive(const int n, const double rho, const double sigma);
RcppExport SEXP _irregulAR1_ar1_prec_consecutive(SEXP nSEXP, SEXP rhoSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_prec_consecutive(n, rho, sigma));
    return rcpp_result_gen;
END_RCPP
}
// ar1_prec_irregular
arma::sp_mat ar1_prec_irregular(const arma::uvec& times, const double rho, const double sigma);
RcppExport SEXP _irregulAR1_ar1_prec_irregular(SEXP timesSEXP, SEXP rhoSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_prec_irregular(times, rho, sigma));
    return rcpp_result_gen;
END_RCPP
}
// chol_tridiag_upper
arma::sp_mat chol_tridiag_upper(const arma::sp_mat& Q);
RcppExport SEXP _irregulAR1_chol_tridiag_upper(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_tridiag_upper(Q));
    return rcpp_result_gen;
END_RCPP
}
// ar1_prec_chol_irregular
arma::sp_mat ar1_prec_chol_irregular(const arma::uvec& times, const double rho, const double sigma);
RcppExport SEXP _irregulAR1_ar1_prec_chol_irregular(SEXP timesSEXP, SEXP rhoSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_prec_chol_irregular(times, rho, sigma));
    return rcpp_result_gen;
END_RCPP
}
// band1_backsolve_vec
arma::vec band1_backsolve_vec(const arma::sp_mat& U, const arma::vec& z);
RcppExport SEXP _irregulAR1_band1_backsolve_vec(SEXP USEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(band1_backsolve_vec(U, z));
    return rcpp_result_gen;
END_RCPP
}
// band1_backsolve_mat
arma::sp_mat band1_backsolve_mat(const arma::sp_mat& L, const arma::sp_mat& Q);
RcppExport SEXP _irregulAR1_band1_backsolve_mat(SEXP LSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(band1_backsolve_mat(L, Q));
    return rcpp_result_gen;
END_RCPP
}
// dprec_drho
arma::sp_mat dprec_drho(const arma::uvec& times, const double rho, const double sigma);
RcppExport SEXP _irregulAR1_dprec_drho(SEXP timesSEXP, SEXP rhoSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dprec_drho(times, rho, sigma));
    return rcpp_result_gen;
END_RCPP
}
// mult_U_band1U
arma::sp_mat mult_U_band1U(const arma::sp_mat& A, const arma::sp_mat U);
RcppExport SEXP _irregulAR1_mult_U_band1U(SEXP ASEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(mult_U_band1U(A, U));
    return rcpp_result_gen;
END_RCPP
}
// dprecchol_drho
arma::sp_mat dprecchol_drho(const arma::sp_mat& U, const arma::sp_mat& dQ);
RcppExport SEXP _irregulAR1_dprecchol_drho(SEXP USEXP, SEXP dQSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type dQ(dQSEXP);
    rcpp_result_gen = Rcpp::wrap(dprecchol_drho(U, dQ));
    return rcpp_result_gen;
END_RCPP
}
// ar1_sim_cpp
arma::vec ar1_sim_cpp(const int n, const double rho, const double sigma);
RcppExport SEXP _irregulAR1_ar1_sim_cpp(SEXP nSEXP, SEXP rhoSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_sim_cpp(n, rho, sigma));
    return rcpp_result_gen;
END_RCPP
}
// ar1_sim_irregular_cpp
arma::vec ar1_sim_irregular_cpp(const arma::uvec& times, const double rho, const double sigma);
RcppExport SEXP _irregulAR1_ar1_sim_irregular_cpp(SEXP timesSEXP, SEXP rhoSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_sim_irregular_cpp(times, rho, sigma));
    return rcpp_result_gen;
END_RCPP
}
// ar1_sim_conditional_cpp
arma::vec ar1_sim_conditional_cpp(const arma::uvec& pred_times, const arma::vec& mu_pred, const arma::vec& x_obs, const arma::uvec& obs_times, const arma::vec& mu_obs, const double rho, const double sigma);
RcppExport SEXP _irregulAR1_ar1_sim_conditional_cpp(SEXP pred_timesSEXP, SEXP mu_predSEXP, SEXP x_obsSEXP, SEXP obs_timesSEXP, SEXP mu_obsSEXP, SEXP rhoSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type pred_times(pred_timesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_pred(mu_predSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x_obs(x_obsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type obs_times(obs_timesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_obs(mu_obsSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_sim_conditional_cpp(pred_times, mu_pred, x_obs, obs_times, mu_obs, rho, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_irregulAR1_ar1_lpdf_cpp", (DL_FUNC) &_irregulAR1_ar1_lpdf_cpp, 5},
    {"_irregulAR1_ar1_cov_consecutive", (DL_FUNC) &_irregulAR1_ar1_cov_consecutive, 3},
    {"_irregulAR1_ar1_cov_irregular", (DL_FUNC) &_irregulAR1_ar1_cov_irregular, 3},
    {"_irregulAR1_ar1_cross_cov", (DL_FUNC) &_irregulAR1_ar1_cross_cov, 4},
    {"_irregulAR1_ar1_cov_chol_irregular", (DL_FUNC) &_irregulAR1_ar1_cov_chol_irregular, 3},
    {"_irregulAR1_ar1_prec_consecutive", (DL_FUNC) &_irregulAR1_ar1_prec_consecutive, 3},
    {"_irregulAR1_ar1_prec_irregular", (DL_FUNC) &_irregulAR1_ar1_prec_irregular, 3},
    {"_irregulAR1_chol_tridiag_upper", (DL_FUNC) &_irregulAR1_chol_tridiag_upper, 1},
    {"_irregulAR1_ar1_prec_chol_irregular", (DL_FUNC) &_irregulAR1_ar1_prec_chol_irregular, 3},
    {"_irregulAR1_band1_backsolve_vec", (DL_FUNC) &_irregulAR1_band1_backsolve_vec, 2},
    {"_irregulAR1_band1_backsolve_mat", (DL_FUNC) &_irregulAR1_band1_backsolve_mat, 2},
    {"_irregulAR1_dprec_drho", (DL_FUNC) &_irregulAR1_dprec_drho, 3},
    {"_irregulAR1_mult_U_band1U", (DL_FUNC) &_irregulAR1_mult_U_band1U, 2},
    {"_irregulAR1_dprecchol_drho", (DL_FUNC) &_irregulAR1_dprecchol_drho, 2},
    {"_irregulAR1_ar1_sim_cpp", (DL_FUNC) &_irregulAR1_ar1_sim_cpp, 3},
    {"_irregulAR1_ar1_sim_irregular_cpp", (DL_FUNC) &_irregulAR1_ar1_sim_irregular_cpp, 3},
    {"_irregulAR1_ar1_sim_conditional_cpp", (DL_FUNC) &_irregulAR1_ar1_sim_conditional_cpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_irregulAR1(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
